/**
 * generated by Xtext 2.20.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import java.util.Collections;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.xtext.example.mydsl.myDsl.Greeting;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslFactory;
import org.xtext.example.mydsl.tests.MyDslInjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(MyDslInjectorProvider.class)
@SuppressWarnings("all")
public class MyDslParsingTest {
  @Test
  public void simpleTest() {
    try {
      final ResourceSetImpl resourceSet = new ResourceSetImpl();
      final MyDslFactory FACTORY = MyDslFactory.eINSTANCE;
      final Model modelA = FACTORY.createModel();
      final Greeting greetingA = FACTORY.createGreeting();
      greetingA.setName("A");
      modelA.getGreetings().add(greetingA);
      final Resource resourceA = resourceSet.createResource(URI.createURI("resultA.mydsl", false));
      resourceA.getContents().add(modelA);
      resourceA.save(Collections.<Object, Object>emptyMap());
      final Model modelB = FACTORY.createModel();
      final Greeting greetingB = FACTORY.createGreeting();
      greetingB.setName("B");
      greetingB.setFrom(greetingA);
      modelB.getGreetings().add(greetingB);
      final Resource resourceB = resourceSet.createResource(URI.createURI("resultB.mydsl", false));
      resourceB.getContents().add(modelB);
      resourceB.save(Collections.<Object, Object>emptyMap());
      final Model modelC = FACTORY.createModel();
      final Greeting greetingC = FACTORY.createGreeting();
      greetingC.setName("C");
      greetingC.setFrom(greetingB);
      modelC.getGreetings().add(greetingC);
      final Resource resourceC = resourceSet.createResource(URI.createURI("resultC.mydsl", false));
      resourceC.getContents().add(modelC);
      resourceC.save(Collections.<Object, Object>emptyMap());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void simpleTest02() {
    try {
      final XtextResourceSet resourceSet = new XtextResourceSet();
      final Resource resourceA = resourceSet.createResource(URI.createURI("resultA.mydsl", false));
      StringInputStream _stringInputStream = new StringInputStream("Hello A!");
      resourceA.load(_stringInputStream, Collections.<Object, Object>emptyMap());
      resourceA.save(Collections.<Object, Object>emptyMap());
      final Resource resourceB = resourceSet.createResource(URI.createURI("resultB.mydsl", false));
      StringInputStream _stringInputStream_1 = new StringInputStream("Hello B from A!");
      resourceB.load(_stringInputStream_1, Collections.<Object, Object>emptyMap());
      resourceB.save(Collections.<Object, Object>emptyMap());
      final Resource resourceC = resourceSet.createResource(URI.createURI("resultC.mydsl", false));
      StringInputStream _stringInputStream_2 = new StringInputStream("Hello C from B!");
      resourceC.load(_stringInputStream_2, Collections.<Object, Object>emptyMap());
      resourceC.save(Collections.<Object, Object>emptyMap());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void simpleTest03() {
    try {
      final XtextResourceSet resourceSet = new XtextResourceSet();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Hello A!");
      _builder.newLine();
      final Model resultA = this.parseHelper.parse(_builder);
      Assert.assertNotNull(resultA);
      final Resource resourceA = resourceSet.createResource(URI.createURI("resultA.mydsl", false));
      resourceA.getContents().add(resultA);
      resourceA.save(Collections.<Object, Object>emptyMap());
      final Resource resourceB = resourceSet.createResource(URI.createURI("resultB.mydsl", false));
      StringInputStream _stringInputStream = new StringInputStream("Hello B from A!");
      resourceB.load(_stringInputStream, Collections.<Object, Object>emptyMap());
      resourceB.save(Collections.<Object, Object>emptyMap());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Hello C from B!");
      _builder_1.newLine();
      final Model resultC = this.parseHelper.parse(_builder_1);
      Assert.assertNotNull(resultC);
      final Resource resourceC = resourceSet.createResource(URI.createURI("resultC.mydsl", false));
      resourceC.getContents().add(resultC);
      resourceC.save(Collections.<Object, Object>emptyMap());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}

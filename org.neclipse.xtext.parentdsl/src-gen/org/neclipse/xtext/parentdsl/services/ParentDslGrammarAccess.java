/*
* generated by Xtext
*/
package org.neclipse.xtext.parentdsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ParentDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class NamespaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceDeclarationNamespaceDeclarationParserRuleCall_0_0 = (RuleCall)cNamespaceDeclarationAssignment_0.eContents().get(0);
		private final Assignment cImportDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportDeclarationImportDeclarationParserRuleCall_1_0 = (RuleCall)cImportDeclarationAssignment_1.eContents().get(0);
		private final Assignment cArtifactAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArtifactArtifactParserRuleCall_2_0 = (RuleCall)cArtifactAssignment_2.eContents().get(0);
		
		//NamespaceDefinition:
		//	namespaceDeclaration=NamespaceDeclaration importDeclaration=ImportDeclaration artifact=Artifact;
		public ParserRule getRule() { return rule; }

		//namespaceDeclaration=NamespaceDeclaration importDeclaration=ImportDeclaration artifact=Artifact
		public Group getGroup() { return cGroup; }

		//namespaceDeclaration=NamespaceDeclaration
		public Assignment getNamespaceDeclarationAssignment_0() { return cNamespaceDeclarationAssignment_0; }

		//NamespaceDeclaration
		public RuleCall getNamespaceDeclarationNamespaceDeclarationParserRuleCall_0_0() { return cNamespaceDeclarationNamespaceDeclarationParserRuleCall_0_0; }

		//importDeclaration=ImportDeclaration
		public Assignment getImportDeclarationAssignment_1() { return cImportDeclarationAssignment_1; }

		//ImportDeclaration
		public RuleCall getImportDeclarationImportDeclarationParserRuleCall_1_0() { return cImportDeclarationImportDeclarationParserRuleCall_1_0; }

		//artifact=Artifact
		public Assignment getArtifactAssignment_2() { return cArtifactAssignment_2; }

		//Artifact
		public RuleCall getArtifactArtifactParserRuleCall_2_0() { return cArtifactArtifactParserRuleCall_2_0; }
	}

	public class NamespaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NamespaceDeclaration:
		//	"namespace" name=QualifedName;
		public ParserRule getRule() { return rule; }

		//"namespace" name=QualifedName
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=QualifedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifedName
		public RuleCall getNameQualifedNameParserRuleCall_1_0() { return cNameQualifedNameParserRuleCall_1_0; }
	}

	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		
		//ImportDeclaration:
		//	{ImportDeclaration} imports+=Import*;
		public ParserRule getRule() { return rule; }

		//{ImportDeclaration} imports+=Import*
		public Group getGroup() { return cGroup; }

		//{ImportDeclaration}
		public Action getImportDeclarationAction_0() { return cImportDeclarationAction_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifedNameWithWildcard
		public RuleCall getImportedNamespaceQualifedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifedNameWithWildcardParserRuleCall_1_0; }
	}

	public class QualifedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifedNameWithWildcard:
		//	QualifedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifedName
		public RuleCall getQualifedNameParserRuleCall_0() { return cQualifedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class ArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Artifact");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Artifact:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private NamespaceDefinitionElements pNamespaceDefinition;
	private NamespaceDeclarationElements pNamespaceDeclaration;
	private ImportDeclarationElements pImportDeclaration;
	private ImportElements pImport;
	private QualifedNameElements pQualifedName;
	private QualifedNameWithWildcardElements pQualifedNameWithWildcard;
	private ArtifactElements pArtifact;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ParentDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.neclipse.xtext.parentdsl.ParentDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//NamespaceDefinition:
	//	namespaceDeclaration=NamespaceDeclaration importDeclaration=ImportDeclaration artifact=Artifact;
	public NamespaceDefinitionElements getNamespaceDefinitionAccess() {
		return (pNamespaceDefinition != null) ? pNamespaceDefinition : (pNamespaceDefinition = new NamespaceDefinitionElements());
	}
	
	public ParserRule getNamespaceDefinitionRule() {
		return getNamespaceDefinitionAccess().getRule();
	}

	//NamespaceDeclaration:
	//	"namespace" name=QualifedName;
	public NamespaceDeclarationElements getNamespaceDeclarationAccess() {
		return (pNamespaceDeclaration != null) ? pNamespaceDeclaration : (pNamespaceDeclaration = new NamespaceDeclarationElements());
	}
	
	public ParserRule getNamespaceDeclarationRule() {
		return getNamespaceDeclarationAccess().getRule();
	}

	//ImportDeclaration:
	//	{ImportDeclaration} imports+=Import*;
	public ImportDeclarationElements getImportDeclarationAccess() {
		return (pImportDeclaration != null) ? pImportDeclaration : (pImportDeclaration = new ImportDeclarationElements());
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifedName:
	//	ID ("." ID)*;
	public QualifedNameElements getQualifedNameAccess() {
		return (pQualifedName != null) ? pQualifedName : (pQualifedName = new QualifedNameElements());
	}
	
	public ParserRule getQualifedNameRule() {
		return getQualifedNameAccess().getRule();
	}

	//QualifedNameWithWildcard:
	//	QualifedName ".*"?;
	public QualifedNameWithWildcardElements getQualifedNameWithWildcardAccess() {
		return (pQualifedNameWithWildcard != null) ? pQualifedNameWithWildcard : (pQualifedNameWithWildcard = new QualifedNameWithWildcardElements());
	}
	
	public ParserRule getQualifedNameWithWildcardRule() {
		return getQualifedNameWithWildcardAccess().getRule();
	}

	//Artifact:
	//	name=ID;
	public ArtifactElements getArtifactAccess() {
		return (pArtifact != null) ? pArtifact : (pArtifact = new ArtifactElements());
	}
	
	public ParserRule getArtifactRule() {
		return getArtifactAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

/*
* generated by Xtext
*/
package org.neclipse.xtext.functiondsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.neclipse.xtext.parentdsl.services.ParentDslGrammarAccess;

@Singleton
public class FunctionDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class NamespaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamespaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceDeclarationNamespaceDeclarationParserRuleCall_0_0 = (RuleCall)cNamespaceDeclarationAssignment_0.eContents().get(0);
		private final Assignment cImportDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportDeclarationImportDeclarationParserRuleCall_1_0 = (RuleCall)cImportDeclarationAssignment_1.eContents().get(0);
		private final Assignment cArtifactAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArtifactFunctionParserRuleCall_2_0 = (RuleCall)cArtifactAssignment_2.eContents().get(0);
		
		//NamespaceDefinition returns parentdsl::NamespaceDefinition:
		//	namespaceDeclaration=NamespaceDeclaration importDeclaration=ImportDeclaration artifact=Function;
		public ParserRule getRule() { return rule; }

		//namespaceDeclaration=NamespaceDeclaration importDeclaration=ImportDeclaration artifact=Function
		public Group getGroup() { return cGroup; }

		//namespaceDeclaration=NamespaceDeclaration
		public Assignment getNamespaceDeclarationAssignment_0() { return cNamespaceDeclarationAssignment_0; }

		//NamespaceDeclaration
		public RuleCall getNamespaceDeclarationNamespaceDeclarationParserRuleCall_0_0() { return cNamespaceDeclarationNamespaceDeclarationParserRuleCall_0_0; }

		//importDeclaration=ImportDeclaration
		public Assignment getImportDeclarationAssignment_1() { return cImportDeclarationAssignment_1; }

		//ImportDeclaration
		public RuleCall getImportDeclarationImportDeclarationParserRuleCall_1_0() { return cImportDeclarationImportDeclarationParserRuleCall_1_0; }

		//artifact=Function
		public Assignment getArtifactAssignment_2() { return cArtifactAssignment_2; }

		//Function
		public RuleCall getArtifactFunctionParserRuleCall_2_0() { return cArtifactFunctionParserRuleCall_2_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cVariableDeclarationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVariableDeclarationVariableDeclarationParserRuleCall_7_0 = (RuleCall)cVariableDeclarationAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Function returns parentdsl::Artifact:
		//	{Function} "function" name=ID "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")" "{"
		//	variableDeclaration=VariableDeclaration "}";
		public ParserRule getRule() { return rule; }

		//{Function} "function" name=ID "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")" "{"
		//variableDeclaration=VariableDeclaration "}"
		public Group getGroup() { return cGroup; }

		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0_0() { return cParametersParameterParserRuleCall_4_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_1_0() { return cParametersParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//variableDeclaration=VariableDeclaration
		public Assignment getVariableDeclarationAssignment_7() { return cVariableDeclarationAssignment_7; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationVariableDeclarationParserRuleCall_7_0() { return cVariableDeclarationVariableDeclarationParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntityAttributeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntityAttributeEntityAttributeParserRuleCall_3_0 = (RuleCall)cEntityAttributeAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//	"var" name=ID "=" entityAttribute=EntityAttribute;
		public ParserRule getRule() { return rule; }

		//"var" name=ID "=" entityAttribute=EntityAttribute
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//entityAttribute=EntityAttribute
		public Assignment getEntityAttributeAssignment_3() { return cEntityAttributeAssignment_3; }

		//EntityAttribute
		public RuleCall getEntityAttributeEntityAttributeParserRuleCall_3_0() { return cEntityAttributeEntityAttributeParserRuleCall_3_0; }
	}

	public class EntityAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEntityReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityReferenceParameterCrossReference_1_0 = (CrossReference)cEntityReferenceAssignment_1.eContents().get(0);
		private final RuleCall cEntityReferenceParameterIDTerminalRuleCall_1_0_1 = (RuleCall)cEntityReferenceParameterCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cEntityAttributeRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAttributeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cAttributeAttributeCrossReference_2_2_0 = (CrossReference)cAttributeAssignment_2_2.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_2_2_0_1 = (RuleCall)cAttributeAttributeCrossReference_2_2_0.eContents().get(1);
		
		//EntityAttribute:
		//	{EntityAttribute} entityReference=[Parameter] ({EntityAttribute.ref=current} "." attribute=[entitydsl::Attribute])*;
		public ParserRule getRule() { return rule; }

		//{EntityAttribute} entityReference=[Parameter] ({EntityAttribute.ref=current} "." attribute=[entitydsl::Attribute])*
		public Group getGroup() { return cGroup; }

		//{EntityAttribute}
		public Action getEntityAttributeAction_0() { return cEntityAttributeAction_0; }

		//entityReference=[Parameter]
		public Assignment getEntityReferenceAssignment_1() { return cEntityReferenceAssignment_1; }

		//[Parameter]
		public CrossReference getEntityReferenceParameterCrossReference_1_0() { return cEntityReferenceParameterCrossReference_1_0; }

		//ID
		public RuleCall getEntityReferenceParameterIDTerminalRuleCall_1_0_1() { return cEntityReferenceParameterIDTerminalRuleCall_1_0_1; }

		//({EntityAttribute.ref=current} "." attribute=[entitydsl::Attribute])*
		public Group getGroup_2() { return cGroup_2; }

		//{EntityAttribute.ref=current}
		public Action getEntityAttributeRefAction_2_0() { return cEntityAttributeRefAction_2_0; }

		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//attribute=[entitydsl::Attribute]
		public Assignment getAttributeAssignment_2_2() { return cAttributeAssignment_2_2; }

		//[entitydsl::Attribute]
		public CrossReference getAttributeAttributeCrossReference_2_2_0() { return cAttributeAttributeCrossReference_2_2_0; }

		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_2_2_0_1() { return cAttributeAttributeIDTerminalRuleCall_2_2_0_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cArrayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_2_0 = (Keyword)cArrayAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDataTypeEntityCrossReference_4_0 = (CrossReference)cDataTypeAssignment_4.eContents().get(0);
		private final RuleCall cDataTypeEntityIDTerminalRuleCall_4_0_1 = (RuleCall)cDataTypeEntityCrossReference_4_0.eContents().get(1);
		
		//Parameter:
		//	{Parameter} name=ID array?="[]"? ":" dataType=[entitydsl::Entity];
		public ParserRule getRule() { return rule; }

		//{Parameter} name=ID array?="[]"? ":" dataType=[entitydsl::Entity]
		public Group getGroup() { return cGroup; }

		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//array?="[]"?
		public Assignment getArrayAssignment_2() { return cArrayAssignment_2; }

		//"[]"
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_2_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//dataType=[entitydsl::Entity]
		public Assignment getDataTypeAssignment_4() { return cDataTypeAssignment_4; }

		//[entitydsl::Entity]
		public CrossReference getDataTypeEntityCrossReference_4_0() { return cDataTypeEntityCrossReference_4_0; }

		//ID
		public RuleCall getDataTypeEntityIDTerminalRuleCall_4_0_1() { return cDataTypeEntityIDTerminalRuleCall_4_0_1; }
	}
	
	
	private NamespaceDefinitionElements pNamespaceDefinition;
	private FunctionElements pFunction;
	private VariableDeclarationElements pVariableDeclaration;
	private EntityAttributeElements pEntityAttribute;
	private ParameterElements pParameter;
	
	private final Grammar grammar;

	private ParentDslGrammarAccess gaParentDsl;

	@Inject
	public FunctionDslGrammarAccess(GrammarProvider grammarProvider,
		ParentDslGrammarAccess gaParentDsl) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaParentDsl = gaParentDsl;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.neclipse.xtext.functiondsl.FunctionDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ParentDslGrammarAccess getParentDslGrammarAccess() {
		return gaParentDsl;
	}

	
	//NamespaceDefinition returns parentdsl::NamespaceDefinition:
	//	namespaceDeclaration=NamespaceDeclaration importDeclaration=ImportDeclaration artifact=Function;
	public NamespaceDefinitionElements getNamespaceDefinitionAccess() {
		return (pNamespaceDefinition != null) ? pNamespaceDefinition : (pNamespaceDefinition = new NamespaceDefinitionElements());
	}
	
	public ParserRule getNamespaceDefinitionRule() {
		return getNamespaceDefinitionAccess().getRule();
	}

	//Function returns parentdsl::Artifact:
	//	{Function} "function" name=ID "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")" "{"
	//	variableDeclaration=VariableDeclaration "}";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//VariableDeclaration:
	//	"var" name=ID "=" entityAttribute=EntityAttribute;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//EntityAttribute:
	//	{EntityAttribute} entityReference=[Parameter] ({EntityAttribute.ref=current} "." attribute=[entitydsl::Attribute])*;
	public EntityAttributeElements getEntityAttributeAccess() {
		return (pEntityAttribute != null) ? pEntityAttribute : (pEntityAttribute = new EntityAttributeElements());
	}
	
	public ParserRule getEntityAttributeRule() {
		return getEntityAttributeAccess().getRule();
	}

	//Parameter:
	//	{Parameter} name=ID array?="[]"? ":" dataType=[entitydsl::Entity];
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//NamespaceDeclaration:
	//	"namespace" name=QualifedName;
	public ParentDslGrammarAccess.NamespaceDeclarationElements getNamespaceDeclarationAccess() {
		return gaParentDsl.getNamespaceDeclarationAccess();
	}
	
	public ParserRule getNamespaceDeclarationRule() {
		return getNamespaceDeclarationAccess().getRule();
	}

	//ImportDeclaration:
	//	{ImportDeclaration} imports+=Import*;
	public ParentDslGrammarAccess.ImportDeclarationElements getImportDeclarationAccess() {
		return gaParentDsl.getImportDeclarationAccess();
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifedNameWithWildcard;
	public ParentDslGrammarAccess.ImportElements getImportAccess() {
		return gaParentDsl.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifedName:
	//	ID ("." ID)*;
	public ParentDslGrammarAccess.QualifedNameElements getQualifedNameAccess() {
		return gaParentDsl.getQualifedNameAccess();
	}
	
	public ParserRule getQualifedNameRule() {
		return getQualifedNameAccess().getRule();
	}

	//QualifedNameWithWildcard:
	//	QualifedName ".*"?;
	public ParentDslGrammarAccess.QualifedNameWithWildcardElements getQualifedNameWithWildcardAccess() {
		return gaParentDsl.getQualifedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifedNameWithWildcardRule() {
		return getQualifedNameWithWildcardAccess().getRule();
	}

	//Artifact:
	//	name=ID;
	public ParentDslGrammarAccess.ArtifactElements getArtifactAccess() {
		return gaParentDsl.getArtifactAccess();
	}
	
	public ParserRule getArtifactRule() {
		return getArtifactAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaParentDsl.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaParentDsl.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaParentDsl.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaParentDsl.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaParentDsl.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaParentDsl.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaParentDsl.getANY_OTHERRule();
	} 
}

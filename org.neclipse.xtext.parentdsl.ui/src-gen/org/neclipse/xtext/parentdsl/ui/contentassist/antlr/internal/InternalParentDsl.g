/*
* generated by Xtext
*/
grammar InternalParentDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.neclipse.xtext.parentdsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.neclipse.xtext.parentdsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.neclipse.xtext.parentdsl.services.ParentDslGrammarAccess;

}

@parser::members {
 
 	private ParentDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ParentDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleNamespaceDefinition
entryRuleNamespaceDefinition 
:
{ before(grammarAccess.getNamespaceDefinitionRule()); }
	 ruleNamespaceDefinition
{ after(grammarAccess.getNamespaceDefinitionRule()); } 
	 EOF 
;

// Rule NamespaceDefinition
ruleNamespaceDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getGroup()); }
(rule__NamespaceDefinition__Group__0)
{ after(grammarAccess.getNamespaceDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamespaceDeclaration
entryRuleNamespaceDeclaration 
:
{ before(grammarAccess.getNamespaceDeclarationRule()); }
	 ruleNamespaceDeclaration
{ after(grammarAccess.getNamespaceDeclarationRule()); } 
	 EOF 
;

// Rule NamespaceDeclaration
ruleNamespaceDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getGroup()); }
(rule__NamespaceDeclaration__Group__0)
{ after(grammarAccess.getNamespaceDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImportDeclaration
entryRuleImportDeclaration 
:
{ before(grammarAccess.getImportDeclarationRule()); }
	 ruleImportDeclaration
{ after(grammarAccess.getImportDeclarationRule()); } 
	 EOF 
;

// Rule ImportDeclaration
ruleImportDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportDeclarationAccess().getGroup()); }
(rule__ImportDeclaration__Group__0)
{ after(grammarAccess.getImportDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifedName
entryRuleQualifedName 
:
{ before(grammarAccess.getQualifedNameRule()); }
	 ruleQualifedName
{ after(grammarAccess.getQualifedNameRule()); } 
	 EOF 
;

// Rule QualifedName
ruleQualifedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifedNameAccess().getGroup()); }
(rule__QualifedName__Group__0)
{ after(grammarAccess.getQualifedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifedNameWithWildcard
entryRuleQualifedNameWithWildcard 
:
{ before(grammarAccess.getQualifedNameWithWildcardRule()); }
	 ruleQualifedNameWithWildcard
{ after(grammarAccess.getQualifedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifedNameWithWildcard
ruleQualifedNameWithWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifedNameWithWildcardAccess().getGroup()); }
(rule__QualifedNameWithWildcard__Group__0)
{ after(grammarAccess.getQualifedNameWithWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArtifact
entryRuleArtifact 
:
{ before(grammarAccess.getArtifactRule()); }
	 ruleArtifact
{ after(grammarAccess.getArtifactRule()); } 
	 EOF 
;

// Rule Artifact
ruleArtifact
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArtifactAccess().getNameAssignment()); }
(rule__Artifact__NameAssignment)
{ after(grammarAccess.getArtifactAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamespaceDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__0__Impl
	rule__NamespaceDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getNamespaceDeclarationAssignment_0()); }
(rule__NamespaceDefinition__NamespaceDeclarationAssignment_0)
{ after(grammarAccess.getNamespaceDefinitionAccess().getNamespaceDeclarationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__1__Impl
	rule__NamespaceDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getImportDeclarationAssignment_1()); }
(rule__NamespaceDefinition__ImportDeclarationAssignment_1)
{ after(grammarAccess.getNamespaceDefinitionAccess().getImportDeclarationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getArtifactAssignment_2()); }
(rule__NamespaceDefinition__ArtifactAssignment_2)
{ after(grammarAccess.getNamespaceDefinitionAccess().getArtifactAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NamespaceDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDeclaration__Group__0__Impl
	rule__NamespaceDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getNamespaceKeyword_0()); }

	'namespace' 

{ after(grammarAccess.getNamespaceDeclarationAccess().getNamespaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getNameAssignment_1()); }
(rule__NamespaceDeclaration__NameAssignment_1)
{ after(grammarAccess.getNamespaceDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImportDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclaration__Group__0__Impl
	rule__ImportDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclarationAccess().getImportDeclarationAction_0()); }
(

)
{ after(grammarAccess.getImportDeclarationAccess().getImportDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclarationAccess().getImportsAssignment_1()); }
(rule__ImportDeclaration__ImportsAssignment_1)*
{ after(grammarAccess.getImportDeclarationAccess().getImportsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifedName__Group__0__Impl
	rule__QualifedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifedNameAccess().getGroup_1()); }
(rule__QualifedName__Group_1__0)*
{ after(grammarAccess.getQualifedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifedName__Group_1__0__Impl
	rule__QualifedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifedNameWithWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifedNameWithWildcard__Group__0__Impl
	rule__QualifedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifedNameWithWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifedNameWithWildcardAccess().getQualifedNameParserRuleCall_0()); }
	ruleQualifedName
{ after(grammarAccess.getQualifedNameWithWildcardAccess().getQualifedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifedNameWithWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifedNameWithWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
(
	'.*' 
)?
{ after(grammarAccess.getQualifedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__NamespaceDefinition__NamespaceDeclarationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getNamespaceDeclarationNamespaceDeclarationParserRuleCall_0_0()); }
	ruleNamespaceDeclaration{ after(grammarAccess.getNamespaceDefinitionAccess().getNamespaceDeclarationNamespaceDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__ImportDeclarationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getImportDeclarationImportDeclarationParserRuleCall_1_0()); }
	ruleImportDeclaration{ after(grammarAccess.getNamespaceDefinitionAccess().getImportDeclarationImportDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__ArtifactAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getArtifactArtifactParserRuleCall_2_0()); }
	ruleArtifact{ after(grammarAccess.getNamespaceDefinitionAccess().getArtifactArtifactParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getNameQualifedNameParserRuleCall_1_0()); }
	ruleQualifedName{ after(grammarAccess.getNamespaceDeclarationAccess().getNameQualifedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclaration__ImportsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclarationAccess().getImportsImportParserRuleCall_1_0()); }
	ruleImport{ after(grammarAccess.getImportDeclarationAccess().getImportsImportParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifedNameWithWildcardParserRuleCall_1_0()); }
	ruleQualifedNameWithWildcard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifedNameWithWildcardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Artifact__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArtifactAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getArtifactAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



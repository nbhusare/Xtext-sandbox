/*
* generated by Xtext
*/
grammar InternalEntityDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.neclipse.xtext.entitydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.neclipse.xtext.entitydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.neclipse.xtext.entitydsl.services.EntityDslGrammarAccess;

}

@parser::members {

 	private EntityDslGrammarAccess grammarAccess;
 	
    public InternalEntityDslParser(TokenStream input, EntityDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "NamespaceDefinition";	
   	}
   	
   	@Override
   	protected EntityDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleNamespaceDefinition
entryRuleNamespaceDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceDefinitionRule()); }
	 iv_ruleNamespaceDefinition=ruleNamespaceDefinition 
	 { $current=$iv_ruleNamespaceDefinition.current; } 
	 EOF 
;

// Rule NamespaceDefinition
ruleNamespaceDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceDefinitionAccess().getNamespaceDeclarationNamespaceDeclarationParserRuleCall_0_0()); 
	    }
		lv_namespaceDeclaration_0_0=ruleNamespaceDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceDefinitionRule());
	        }
       		set(
       			$current, 
       			"namespaceDeclaration",
        		lv_namespaceDeclaration_0_0, 
        		"NamespaceDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceDefinitionAccess().getImportDeclarationImportDeclarationParserRuleCall_1_0()); 
	    }
		lv_importDeclaration_1_0=ruleImportDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceDefinitionRule());
	        }
       		set(
       			$current, 
       			"importDeclaration",
        		lv_importDeclaration_1_0, 
        		"ImportDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceDefinitionAccess().getArtifactEntityParserRuleCall_2_0()); 
	    }
		lv_artifact_2_0=ruleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceDefinitionRule());
	        }
       		set(
       			$current, 
       			"artifact",
        		lv_artifact_2_0, 
        		"Entity");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEntityAccess().getEntityAction_0(),
            $current);
    }
)	otherlv_1='Entity' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEntityAccess().getEntityKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getAttributesAttributeParserRuleCall_4_0()); 
	    }
		lv_attributes_4_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_4_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getTypeDataTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current; } 
	 EOF 
;

// Rule DataType
ruleDataType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getStringTypeParserRuleCall_0()); 
    }
    this_StringType_0=ruleStringType
    { 
        $current = $this_StringType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getEntityReferenceParserRuleCall_1()); 
    }
    this_EntityReference_1=ruleEntityReference
    { 
        $current = $this_EntityReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEntityReference
entryRuleEntityReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityReferenceRule()); }
	 iv_ruleEntityReference=ruleEntityReference 
	 { $current=$iv_ruleEntityReference.current; } 
	 EOF 
;

// Rule EntityReference
ruleEntityReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEntityReferenceAccess().getEntityReferenceAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityReferenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getEntityReferenceAccess().getEntityEntityCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleStringType
entryRuleStringType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringTypeRule()); }
	 iv_ruleStringType=ruleStringType 
	 { $current=$iv_ruleStringType.current; } 
	 EOF 
;

// Rule StringType
ruleStringType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringTypeAccess().getStringTypeAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=	'string' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringTypeRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "string");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStringTypeAccess().getLeftParenthesisKeyword_2_0());
    }
	otherlv_3='length' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStringTypeAccess().getLengthKeyword_2_1());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStringTypeAccess().getEqualsSignKeyword_2_2());
    }
(
(
		lv_length_5_0=RULE_INT
		{
			newLeafNode(lv_length_5_0, grammarAccess.getStringTypeAccess().getLengthINTTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"length",
        		lv_length_5_0, 
        		"INT");
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStringTypeAccess().getCommaKeyword_2_4_0());
    }
	otherlv_7='default-value' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStringTypeAccess().getDefaultValueKeyword_2_4_1());
    }
	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStringTypeAccess().getEqualsSignKeyword_2_4_2());
    }
(
(
		lv_defaultValue_9_0=RULE_STRING
		{
			newLeafNode(lv_defaultValue_9_0, grammarAccess.getStringTypeAccess().getDefaultValueSTRINGTerminalRuleCall_2_4_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_9_0, 
        		"STRING");
	    }

)
))?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStringTypeAccess().getRightParenthesisKeyword_2_5());
    }
)?)
;





// Entry rule entryRuleNamespaceDeclaration
entryRuleNamespaceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceDeclarationRule()); }
	 iv_ruleNamespaceDeclaration=ruleNamespaceDeclaration 
	 { $current=$iv_ruleNamespaceDeclaration.current; } 
	 EOF 
;

// Rule NamespaceDeclaration
ruleNamespaceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='namespace' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNamespaceDeclarationAccess().getNamespaceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceDeclarationAccess().getNameQualifedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifedName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleImportDeclaration
entryRuleImportDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportDeclarationRule()); }
	 iv_ruleImportDeclaration=ruleImportDeclaration 
	 { $current=$iv_ruleImportDeclaration.current; } 
	 EOF 
;

// Rule ImportDeclaration
ruleImportDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getImportDeclarationAccess().getImportDeclarationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImportDeclarationAccess().getImportsImportParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportDeclarationRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifedName
entryRuleQualifedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifedNameRule()); } 
	 iv_ruleQualifedName=ruleQualifedName 
	 { $current=$iv_ruleQualifedName.current.getText(); }  
	 EOF 
;

// Rule QualifedName
ruleQualifedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleQualifedNameWithWildcard
entryRuleQualifedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifedNameWithWildcardRule()); } 
	 iv_ruleQualifedNameWithWildcard=ruleQualifedNameWithWildcard 
	 { $current=$iv_ruleQualifedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifedNameWithWildcard
ruleQualifedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifedNameWithWildcardAccess().getQualifedNameParserRuleCall_0()); 
    }
    this_QualifedName_0=ruleQualifedName    {
		$current.merge(this_QualifedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;







RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



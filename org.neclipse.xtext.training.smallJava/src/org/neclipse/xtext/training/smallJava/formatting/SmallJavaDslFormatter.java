/*
 * generated by Xtext
 */
package org.neclipse.xtext.training.smallJava.formatting;

import com.google.inject.Inject;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;
import org.neclipse.xtext.training.smallJava.services.SmallJavaDslGrammarAccess;

/**
 * This class contains custom formatting description.
 *
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting on how and
 * when to use it
 *
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class SmallJavaDslFormatter extends AbstractDeclarativeFormatter {

	@Inject
	private SmallJavaDslGrammarAccess grammarAccess;

	@Override
	protected void configureFormatting(FormattingConfig formattingConfig) {
		// Namespace
		formattingConfig.setLinewrap(2).after(
				grammarAccess.getNamespaceAccess().getNameAssignment_1());

		// Import
		formattingConfig.setLinewrap(1).after(
				grammarAccess.getImportAccess().getRule());

		// Curly braces
		for (final Pair<Keyword, Keyword> pair : grammarAccess
				.findKeywordPairs("{", "}")) {
			formattingConfig.setLinewrap(1).after(pair.getFirst());
			formattingConfig.setLinewrap(1).before(pair.getSecond());
		}

		// Attributes
		formattingConfig.setLinewrap(2).before(
				grammarAccess.getSmallClassRule());
		formattingConfig.setLinewrap(1).after(grammarAccess.getAttributeRule());
	}
}

/*
* generated by Xtext
*/
package org.neclipse.xtend.training.smallJava.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.neclipse.xtend.training.smallJava.services.SmallJavaDslGrammarAccess;

public class SmallJavaDslParser extends AbstractContentAssistParser {
	
	@Inject
	private SmallJavaDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.neclipse.xtend.training.smallJava.ui.contentassist.antlr.internal.InternalSmallJavaDslParser createParser() {
		org.neclipse.xtend.training.smallJava.ui.contentassist.antlr.internal.InternalSmallJavaDslParser result = new org.neclipse.xtend.training.smallJava.ui.contentassist.antlr.internal.InternalSmallJavaDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getBasicTypeAccess().getAlternatives(), "rule__BasicType__Alternatives");
					put(grammarAccess.getNamespaceAccess().getGroup(), "rule__Namespace__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQNameAccess().getGroup(), "rule__QName__Group__0");
					put(grammarAccess.getQNameAccess().getGroup_1(), "rule__QName__Group_1__0");
					put(grammarAccess.getQNameWithWildcardAccess().getGroup(), "rule__QNameWithWildcard__Group__0");
					put(grammarAccess.getSmallClassAccess().getGroup(), "rule__SmallClass__Group__0");
					put(grammarAccess.getSmallClassAccess().getGroup_2(), "rule__SmallClass__Group_2__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup_0(), "rule__DataType__Group_0__0");
					put(grammarAccess.getNamespaceAccess().getNameAssignment_1(), "rule__Namespace__NameAssignment_1");
					put(grammarAccess.getNamespaceAccess().getImportsAssignment_2(), "rule__Namespace__ImportsAssignment_2");
					put(grammarAccess.getNamespaceAccess().getClassAssignment_3(), "rule__Namespace__ClassAssignment_3");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getSmallClassAccess().getNameAssignment_1(), "rule__SmallClass__NameAssignment_1");
					put(grammarAccess.getSmallClassAccess().getSuperClassAssignment_2_1(), "rule__SmallClass__SuperClassAssignment_2_1");
					put(grammarAccess.getSmallClassAccess().getAttributesAssignment_4(), "rule__SmallClass__AttributesAssignment_4");
					put(grammarAccess.getAttributeAccess().getDatatypeAssignment_0(), "rule__Attribute__DatatypeAssignment_0");
					put(grammarAccess.getAttributeAccess().getArrayAssignment_1(), "rule__Attribute__ArrayAssignment_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_2(), "rule__Attribute__NameAssignment_2");
					put(grammarAccess.getClassTypeAccess().getTypeAssignment(), "rule__ClassType__TypeAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.neclipse.xtend.training.smallJava.ui.contentassist.antlr.internal.InternalSmallJavaDslParser typedParser = (org.neclipse.xtend.training.smallJava.ui.contentassist.antlr.internal.InternalSmallJavaDslParser) parser;
			typedParser.entryRuleNamespace();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SmallJavaDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SmallJavaDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

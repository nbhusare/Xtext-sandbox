/*
 * generated by Xtext
 */
package org.neclipse.xtext.training.smallJava.ui.quickfix;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.neclipse.xtext.training.smallJava.smallJavaDsl.SmallClass;
import org.neclipse.xtext.training.smallJava.validation.ValidationConstants;

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
public class SmallJavaDslQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {

	@Fix(ValidationConstants.INVALID_CLASS_NAME)
	public final void capitilizeClassNameFirstCharacter(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Capitalize first letter", "Capitalize first letter of '" + issue.getData()[0] + "'",
				"upcase.png", new IModification() {
					public void apply(IModificationContext context) throws BadLocationException {
						final IXtextDocument xtextDocument = context.getXtextDocument();
						final String firstLetter = xtextDocument.get(issue.getOffset(), 1);
						xtextDocument.replace(issue.getOffset(), 1, firstLetter.toUpperCase());
					}
				});
	}

	@Fix(ValidationConstants.HIERARCHY_CYCLE)
	public final void removeHierarchyCycle(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove supertype", "Remove supertype '" + issue.getData()[0] + "'", "delete.png",
				new ISemanticModification() {

					@Override
					public void apply(EObject element, IModificationContext context) throws Exception {
						((SmallClass) element).setSuperClass(null);
					}
				});

	}

	@Fix(ValidationConstants.INVALID_SUPER_CLASS)
	public final void removeSuperType(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Remove supertype", "Remove supertype '" + issue.getData()[0] + "'", "delete.png",
				new ISemanticModification() {

					@Override
					public void apply(EObject element, IModificationContext context) throws Exception {
						((SmallClass) element).setSuperClass(null);
					}
				});

	}

}

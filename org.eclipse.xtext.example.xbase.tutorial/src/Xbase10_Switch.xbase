import helper.Rectangle
import helper.Circle
/*
 * The switch expression is different and much more powerful than the
 * switch statement in Java.
 * 
 * First it allows to switch over everything (not only primitives) and
 * it does not have a fall through logic. Also the order of cases is 
 * important : First match wins!
 */
val list = newArrayList('foo','bar','baz')
switch(list.head) {
	case 'foo' : "it's foo"
	case 'bar' : 'a bar'
	default : "don't know"
}
// it's foo (String)

/*
 * The type guards are a pragmatic variant of what people often do with
 * pattern matching in functional languages.
 */
val list2 = newArrayList(new Rectangle(5,5), new Circle(4), new Rectangle(6,8))
list2.map(shape | 
		switch (shape) {
			Circle 	: 
				'a circle : diameter='+shape.diameter
				
			Rectangle case shape.height == shape.width : 
				'a square : size='+shape.width
				
			Rectangle : 
				'a rectangle : width='+shape.width+', height='+shape.height
				
		})
// [a square : size=5, a circle : diameter=4, a rectangle : width=8 height=6] (List<String>)


